"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/highlight-words";
exports.ids = ["vendor-chunks/highlight-words"];
exports.modules = {

/***/ "(ssr)/./node_modules/highlight-words/dist/highlight-words.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/highlight-words/dist/highlight-words.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ highlightWords)\n/* harmony export */ });\nlet IDX = 36;\nlet HEX = \"\";\nwhile(IDX--){\n    HEX += IDX.toString(36);\n}\nfunction uid(len = 11) {\n    let str = \"\";\n    let num = len;\n    while(num--){\n        str += HEX[Math.random() * 36 | 0];\n    }\n    return str;\n}\nconst escapeRegexp = (term)=>term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char)=>`\\\\${char}`);\nconst termsToRegExpString = (terms)=>terms.replace(/\\s{2,}/g, \" \").split(\" \").join(\"|\");\nconst regexpQuery = ({ terms, matchExactly = false })=>{\n    if (typeof terms !== \"string\") {\n        throw new TypeError(\"Expected a string\");\n    }\n    const escapedTerms = escapeRegexp(terms.trim());\n    return `(${matchExactly ? escapedTerms : termsToRegExpString(escapedTerms)})`;\n};\nconst buildRegexp = ({ terms, matchExactly = false })=>{\n    try {\n        const fromString = /^([/~@;%#'])(.*?)\\1([gimsuy]*)$/.exec(terms);\n        if (fromString) {\n            return new RegExp(fromString[2], fromString[3]);\n        }\n        return new RegExp(regexpQuery({\n            terms,\n            matchExactly\n        }), \"ig\");\n    } catch (e) {\n        throw new TypeError(\"Expected terms to be either a string or a RegExp!\");\n    }\n};\nconst hasProp = (prop)=>(obj)=>obj !== null && typeof obj === \"object\" && prop in obj;\nconst hasMatch = hasProp(\"match\");\nconst chunkExists = (chunk)=>typeof chunk !== \"undefined\";\nfunction clip({ curr, next, prev, clipBy = 3 }) {\n    const words = curr.text.split(\" \");\n    const len = words.length;\n    if (curr.match || clipBy >= len) {\n        return curr.text;\n    }\n    const ellipsis = \"...\";\n    if (chunkExists(next) && chunkExists(prev) && hasMatch(prev) && hasMatch(next)) {\n        if (len > clipBy * 2) {\n            return [\n                ...words.slice(0, clipBy),\n                ellipsis,\n                ...words.slice(-clipBy)\n            ].join(\" \");\n        }\n        return curr.text;\n    }\n    if (chunkExists(next) && hasMatch(next)) {\n        return [\n            ellipsis,\n            ...words.slice(-clipBy)\n        ].join(\" \");\n    }\n    if (chunkExists(prev) && hasMatch(prev)) {\n        return [\n            ...words.slice(0, clipBy),\n            ellipsis\n        ].join(\" \");\n    }\n    return curr.text;\n}\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nconst hasLength = (str)=>str.length > 0;\nconst highlightWords = ({ text, query, clipBy, matchExactly = false })=>{\n    const safeQuery = typeof query === \"string\" ? query.trim() : query;\n    if (safeQuery === \"\") {\n        return [\n            {\n                key: uid(),\n                text,\n                match: false\n            }\n        ];\n    }\n    const searchRegexp = buildRegexp({\n        terms: query,\n        matchExactly\n    });\n    return text.split(searchRegexp).filter(hasLength).map((str)=>({\n            // Compose the object for a match\n            key: uid(),\n            text: str,\n            match: matchExactly ? str.toLowerCase() === safeQuery.toLowerCase() : searchRegexp.test(str)\n        })).map((chunk, index, chunks)=>__spreadValues(__spreadValues({}, chunk), typeof clipBy === \"number\" && {\n            // We only overwrite the text if there is a clip\n            text: clip(__spreadProps(__spreadValues(__spreadValues({\n                curr: chunk\n            }, index < chunks.length - 1 && {\n                next: chunks[index + 1]\n            }), index > 0 && {\n                prev: chunks[index - 1]\n            }), {\n                // If this wasn't the first chunk, set the previous chunk\n                clipBy\n            }))\n        }));\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/highlight-words/dist/highlight-words.mjs\n");

/***/ })

};
;